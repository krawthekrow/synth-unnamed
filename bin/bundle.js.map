{"version":3,"sources":["webpack:///webpack/bootstrap 94ad102b4b2e90e5e350","webpack:///./src/SynthAppEntry.jsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./src/reactComponents/SoundUploader.jsx","webpack:///./src/reactComponents/SpectrogramCanvas.jsx","webpack:///./src/reactComponents/Canvas.jsx","webpack:///./src/utils/Utils.js","webpack:///./src/reactComponents/TestCanvas.jsx","webpack:///./src/tests/UnitTestsManager.js","webpack:///./src/webgl/WebGLStateManager.js","webpack:///./src/webgl/QuadDrawingUtils.js","webpack:///./src/webgl/ShaderUtils.js","webpack:///./src/gpgpu/GPGPUManager.js","webpack:///./src/gpgpu/GPUDFT.js","webpack:///./src/gpgpu/GPGPUComplexIncludes.js","webpack:///./src/gpgpu/GPUFFT.js","webpack:///./src/gpgpu/GPUSTFT.js","webpack:///./src/engine/SpectrogramKernel.js","webpack:///./src/tests/FFTTimingTestManager.js","webpack:///./src/utils/EventLoop.js","webpack:///./src/utils/Queue.js","webpack:///./src/webgl/QuadDrawingKernel.js","webpack:///./src/gpgpu/GPUIFFT.js","webpack:///./src/gpgpu/ComplexArray2D.js","webpack:///./src/gpgpu/GPUISTFT.js"],"names":["SynthApp","props","sound","webglStateManager","CANVAS_DIMS","createWebGLStateManager","mainCanvas","gpgpuManager","data","ctx","window","AudioContext","webkitAudioContext","decodeAudioData","then","buffer","setSound","bufferView","getChannelData","gpuSTFT","spectrum","stft","dispose","spectroKernel","spectro","run","quadKernel","tex","dims","disposeGPUArr","console","log","handleSoundUpload","width","height","canvas","spectroCanvas","Component","init","render","document","getElementById","module","exports","SoundUploader","file","fileInput","files","reader","FileReader","onload","e","onUpload","target","result","readAsArrayBuffer","input","handleClickUpload","propTypes","PropTypes","func","isRequired","SpectrogramCanvas","getContext","Canvas","onMount","beginPath","rect","fillStyle","fill","newDims","Vector","x","y","oVec","scale","Math","floor","sqrt","dot","atan2","r","phi","cos","sin","Dimensions","pos","isPointInRect","Rect","oDims","left","right","top","bottom","Array2D","Utils","flatten","MouseButton","MOUSE_LEFT","MOUSE_MIDDLE","MOUSE_RIGHT","p","length","Array","undefined","map","unused","i","compute1DArray","i2","compute2DArray","arr","push","num","min","max","DIRS4","TestCanvas","TestUtils","arr1","arr2","cmpFunc","defaultEquals","every","val","equals","manager","arrs1","getCPUArrs","arrs2","compareArray2D","rtol","atol","absX","abs","absY","diff","testName","assertVal","GPGPUUnitTests","stateManager","testDims","randArr","compute2DArrayAsArray2D","random","randArr2","toGPUAndBack","singleChannel","gpuArr","arrToGPUArr","resArr","gpuArrToArr","processTestResult","floatEquals","packedRandArr","gpuArr1","gpuArr2","addKernel","createKernel","PACK_FLOAT_INCLUDE","resGPUArr","runKernel","disposeKernel","cmpArr","addsubKernel","resGPUArrs","resArr1","resArr2","cmpArr1","cmpArr2","multKernel","type","name","mult","uMult","flatArrToGPUArr","FFTUnitTests","managerFloat","fromRealArr","randFloatArr","fromArrs","gpuDFT","gpuFFT","gpuFFTFloat","gpuIFFT","dftArrs","parallelDFT","fftArrs","parallelFFT","fftFloatArrs","identityArrs","parallelIFFT","compareComplexArray2D","fftCPUArrs","fftFloatCPUArrs","STFTUnitTests","windSz","numWind","parseInt","spectroDims","windFunc","PI","fftInput","gpuISTFT","testLength","identityArr","istft","manualResArr","manualSTFT","slicedIdentityArr","slice","slicedRandArr","compareArrays","SpectrogramUnitTests","magRange","magOffset","res","pow","clamp","mag","expectedArr","manualSpectrogram","from","gpuArrToFlatArr","UnitTestsManager","WebGLStateManager","numAttribsEnabled","lazyQuadPosBuff","lazyQuadIndexBuff","createStaticArrBuff","ARRAY_BUFFER","QUAD_POS_ARR","ELEMENT_ARRAY_BUFFER","QUAD_INDEX_ARR","contents","buff","createBuffer","bindBuffer","bufferData","STATIC_DRAW","numAttribs","disableVertexAttribArray","enableVertexAttribArray","deleteBuffer","QuadDrawingUtils","transforms","dynamicDims","dynamicPos","coordSystem","TEX_COORD_SYSTEM","img","TRANSFORMS","translate","line","join","Float32Array","flipX","flipY","gl","createQuadArray","fromBounds","Uint16Array","QUAD_NUM_VERT","WebGLProgramInfo","program","vertShader","fragShader","ShaderUtils","src","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","vertSrc","fragSrc","createProgram","VERTEX_SHADER","FRAGMENT_SHADER","attachShader","linkProgram","texNames","forEach","texName","texLoc","getUniformLocation","uniform1i","uniformName","uniformLoc","uniform2fv","toArray","attribName","itemSize","attrib","getAttribLocation","vertexAttribPointer","FLOAT","textures","texture","activeTexture","toString","bindTexture","TEXTURE_2D","programInfo","detachShader","deleteShader","deleteProgram","GPUArray","GPGPUKernel","params","numOutputs","GPGPUManager","useFloat","embeddedStateManager","extDB","getExtension","format","RGBA","createTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","drawBuffersWEBGL","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","uniforms","vals","uniform","uniform1f","test","Int32Array","useProgram","enableAttribs","quadIndexBuff","drawElements","TRIANGLE_STRIP","UNSIGNED_SHORT","deleteTexture","numChannels","ALPHA","RGB","numChannelsToFormat","floatArr","createComputeTexture","UNSIGNED_BYTE","Uint8Array","pixelFlatArr","flatArr","overrideFloat","createFBO","buffLen","getArea","readPixels","deleteFramebuffer","numTexChannels","copyArr","copyGPUArr","arrData","offset","srcNumChannels","destNumChannels","extractCode","placeCode","copyKernel","createCopyKernel","computeFunc","inputNames","includeSrc","concat","inputName","vertShaderSrc","createVertShaderSrc","fragShaderSrc","createFragShaderSrc","trim","split","setVertAttrib","quadPosBuff","registerTextures","kernel","inputArrs","outputDims","paramVals","colorOutput","drawDirect","registerUniforms","uDims","outputTextures","bindTextures","viewport","drawQuad","disposeProgram","getQuadPosBuff","getQuadIndexBuff","createElement","options","depth","antialias","createGPGPUCanvasContext","ENDIANNESS","b","ArrayBuffer","a","Uint32Array","c","Error","useDrawBuffers","GPUDFT","dftKernel","LIB","getGPUArrs","fromGPUArrs","GPGPUComplexIncludes","GPUFFTPacked","zeroKernel","fftKernel","fftWidth","realArr","imgArr","generateImgArr","butterflyWidth","stepResGPUArrs","uButterflyWidth","GPUFFTFloat","stepArr","getGPUArr","stepResGPUArr","fromGPUArr","GPUFFT","fftManager","GPUSTFT","windowKernel","wrapWidth","paddedArr","set","gpuArrDims","fftInputArr","uSrcDims","DEFAULT_WRAP_WIDTH","SpectrogramKernel","postprocessKernel","createPostprocessKernel","FFTTimingTestManager","randArr1","randArr3","eventLoop","dftTime","fftTime","fftFloatTime","addTask","finish","startTime","performance","now","dftArr","endTime","fftArr","fftFloatArr","start","EventLoopTask","checkValid","invalidCallback","EventLoop","updateFunc","tasks","enabled","loopFunc","isEmpty","task","pop","requestAnimationFrame","loop","callback","Queue","QuadDrawingKernel","createDirectDrawFragShaderSrc","boundingRect","canvasDims","registerVectorUniform","GPUIFFT","ComplexArray2D","cpuArrs","gpuArrs","arr2D","realGPUArr","imgGPUArr","GPUISTFT","toGPUArr","windowedArr","resArrLength","ceil","resPixelArr"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 94ad102b4b2e90e5e350","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SoundUploader from 'reactComponents/SoundUploader.jsx';\nimport SpectrogramCanvas from 'reactComponents/SpectrogramCanvas.jsx';\nimport Canvas from 'reactComponents/Canvas.jsx';\nimport TestCanvas from 'reactComponents/TestCanvas.jsx';\nimport {Utils, Dimensions, Vector, Rect} from 'utils/Utils.js';\nimport UnitTestsManager from 'tests/UnitTestsManager.js';\nimport FFTTimingTestManager from 'tests/FFTTimingTestManager.js';\nimport GPGPUManager from 'gpgpu/GPGPUManager.js';\nimport GPUDFT from 'gpgpu/GPUDFT.js';\nimport GPUFFT from 'gpgpu/GPUFFT.js';\nimport GPUSTFT from 'gpgpu/GPUSTFT.js';\nimport SpectrogramKernel from 'engine/SpectrogramKernel.js';\nimport QuadDrawingKernel from 'webgl/QuadDrawingKernel.js';\n\nclass SynthApp extends React.Component {\n    constructor(props){\n        super(props);\n        this.sound = null;\n        this.webglStateManager = null;\n        this.CANVAS_DIMS = new Dimensions(1800, 1024);\n    }\n    componentDidMount(){\n        //UnitTestsManager.runAllTests();\n        //FFTTimingTestManager.run();\n        this.webglStateManager = GPGPUManager.createWebGLStateManager(this.mainCanvas);\n        this.gpgpuManager = new GPGPUManager(this.webglStateManager);\n    }\n    handleSoundUpload(data){\n        const ctx = new (window.AudioContext || window.webkitAudioContext)();\n        ctx.decodeAudioData(data).then((buffer) =>{\n            this.setSound(buffer);\n            //const bufferView = buffer.getChannelData(0);\n            //for(let i = 0; i < buffer.length; i++){\n            //    bufferView[i] /= 6;\n            //}\n            //const source = ctx.createBufferSource();\n            //source.buffer = buffer;\n            //source.connect(ctx.destination);\n            //source.start();\n        });\n    }\n    setSound(buffer){\n        this.sound = buffer;\n        const bufferView = this.sound.getChannelData(0);\n\n        const gpuSTFT = new GPUSTFT(this.gpgpuManager);\n        const spectrum = gpuSTFT.stft(bufferView, 2048, false, 2048);\n        gpuSTFT.dispose();\n\n        const spectroKernel = new SpectrogramKernel(this.gpgpuManager);\n        const spectro = spectroKernel.run(spectrum, 5, 2);\n        spectroKernel.dispose();\n        spectrum.dispose(this.gpgpuManager);\n\n        const quadKernel = new QuadDrawingKernel(this.webglStateManager);\n        quadKernel.run(spectro.tex, new Rect(\n            new Vector(0, 0),\n            spectro.dims\n        ), this.CANVAS_DIMS);\n        quadKernel.dispose();\n        \n        this.gpgpuManager.disposeGPUArr(spectro);\n\n        console.log('Done.');\n    }\n    render(){\n        return (\n<div>\n    <SoundUploader onUpload={data => this.handleSoundUpload(data)} />\n    {/*<TestCanvas />*/}\n    <canvas key='mainCanvas' width={this.CANVAS_DIMS.width} height={this.CANVAS_DIMS.height} ref={canvas => {this.mainCanvas = canvas;}} />\n    <SpectrogramCanvas ref={canvas => {this.spectroCanvas = canvas;}} />\n</div>\n        );\n    }\n};\n\nfunction init(){\n    ReactDOM.render(<SynthApp />, document.getElementById('indexContainer'));\n}\n\nmodule.exports = {\n    init: init\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/SynthAppEntry.jsx","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 1\n// module chunks = 0","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 2\n// module chunks = 0","import React from 'react';\n\nclass SoundUploader extends React.Component {\n    handleClickUpload(){\n        const file = this.fileInput.files[0];\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            this.props.onUpload(e.target.result);\n        };\n        reader.readAsArrayBuffer(file);\n    }\n    render(){\n        return(\n<div>\n    <div className=\"form-group\">\n        <label>\n            Upload sound file\n            <input type=\"file\" ref={input => {this.fileInput = input;}} />\n        </label>\n    </div>\n    <button type=\"button\" className=\"btn btn-default\" onClick={e => {this.handleClickUpload();}}>Upload</button>\n</div>\n        );\n    }\n};\nSoundUploader.propTypes = {\n    onUpload: React.PropTypes.func.isRequired\n};\n\nmodule.exports = SoundUploader\n\n\n\n// WEBPACK FOOTER //\n// ./src/reactComponents/SoundUploader.jsx","import React from 'react';\n\nclass SpectrogramCanvas extends React.Component{\n    componentDidMount(){\n        this.ctx = this.canvas.getContext('2d');\n    }\n    render(){\n        return (\n<canvas width=\"1500\" height=\"2048\" style={{\n}} ref={canvas => {this.canvas = canvas;}} />\n        );\n    }\n};\nSpectrogramCanvas.propTypes = {\n};\n\nmodule.exports = SpectrogramCanvas;\n\n\n\n// WEBPACK FOOTER //\n// ./src/reactComponents/SpectrogramCanvas.jsx","import React from 'react';\nimport {Dimensions} from 'utils/Utils.js';\n\nclass Canvas extends React.Component{\n    componentDidMount(){\n        this.ctx = this.canvas.getContext('2d');\n        if('onMount' in this.props){\n            this.props.onMount(this.ctx);\n        }\n        this.ctx.canvas.width = 100;\n        this.ctx.canvas.height = 10;\n        this.ctx.beginPath();\n        this.ctx.rect(0, 0, 100, 10);\n        this.ctx.fillStyle = 'red';\n        this.ctx.fill();\n    }\n    setDimensions(newDims){\n        this.canvas.width = newDims.width;\n        this.canvas.height = newDims.height;\n    }\n    render(){\n        return (\n            <canvas width=\"1\" height=\"1\" ref={canvas => {this.canvas = canvas;}} />\n        );\n    }\n};\nCanvas.propTypes = {\n    onMount: React.PropTypes.func\n};\n\nmodule.exports = Canvas\n\n\n\n// WEBPACK FOOTER //\n// ./src/reactComponents/Canvas.jsx","class Vector{\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    static fromPolar(r, phi){\n        return new Vector(\n            r * Math.cos(phi),\n            r * Math.sin(phi)\n        );\n    }\n    add(oVec){\n        return new Vector(\n            this.x + oVec.x,\n            this.y + oVec.y\n        );\n    }\n    subtract(oVec){\n        return new Vector(\n            this.x - oVec.x,\n            this.y - oVec.y\n        );\n    }\n    multiply(scale){\n        return new Vector(\n            this.x * scale,\n            this.y * scale\n        );\n    }\n    divide(scale){\n        return new Vector(\n            this.x / scale,\n            this.y / scale\n        );\n    }\n    equals(oVec){\n        return (\n            this.x == oVec.x &&\n            this.y == oVec.y\n        );\n    }\n    floor(){\n        return new Vector(\n            Math.floor(this.x),\n            Math.floor(this.y)\n        );\n    }\n    dot(oVec){\n        return this.x * oVec.x + this.y * oVec.y;\n    }\n    getLength(){\n        return Math.sqrt(this.dot(this));\n    }\n    getAngle(){\n        return Math.atan2(this.y, this.x);\n    }\n    toArray(){\n        return [this.x, this.y];\n    }\n};\n\nclass Dimensions{\n    constructor(width, height){\n        this.width = width;\n        this.height = height;\n    }\n    contains(pos){\n        return isPointInRect(pos,\n            new Rect(\n                new Vector(0, 0),\n                this\n            )\n        );\n    }\n    getArea(){\n        return this.width * this.height;\n    }\n    equals(oDims){\n        return this.width == oDims.width && this.height == oDims.height;\n    }\n    toArray(){\n        return [this.width, this.height];\n    }\n};\n\nclass Rect{\n    constructor(pos, dims){\n        this.pos = pos;\n        this.dims = dims;\n    }\n    get x(){\n        return this.pos.x;\n    }\n    get y(){\n        return this.pos.y;\n    }\n    get width(){\n        return this.dims.width;\n    }\n    get height(){\n        return this.dims.height;\n    }\n    get left(){\n        return this.pos.x;\n    }\n    get right(){\n        return this.pos.x + this.dims.width;\n    }\n    get top(){\n        return this.pos.y;\n    }\n    get bottom(){\n        return this.pos.y + this.dims.height;\n    }\n    static fromBounds(left, right, top, bottom){\n        return new Rect(\n            new Vector(left, top),\n            new Dimensions(right - left, bottom - top)\n        );\n    }\n};\n\nclass Array2D{\n    constructor(dims, data){\n        this.dims = dims;\n        this.data = data;\n    }\n    get width(){\n        return this.dims.width;\n    }\n    get height(){\n        return this.dims.height;\n    }\n    getFlatArr(){\n        return Utils.flatten(this.data);\n    }\n};\n\nclass MouseButton{\n};\nMouseButton.MOUSE_LEFT = 0;\nMouseButton.MOUSE_MIDDLE = 1;\nMouseButton.MOUSE_RIGHT = 2;\n\nclass Utils{\n    static isPointInRect(p, rect){\n        return p.x >= rect.left && p.x < rect.right &&\n               p.y >= rect.top && p.y < rect.bottom;\n    }\n    static compute1DArray(length, func){\n        return new Array(length).fill(undefined).map(\n            (unused, i) => func(i)\n        );\n    }\n    static compute2DArray(dims, func){\n        return Utils.compute1DArray(dims.height,\n            i => Utils.compute1DArray(dims.width,\n                i2 => func(new Vector(i2, i))\n            )\n        );\n    }\n    static compute2DArrayAsArray2D(dims, func){\n        return new Array2D(dims, Utils.compute2DArray(dims, func));\n    }\n    static flatten(arr){\n        const result = [];\n        for(let i = 0; i < arr.length; i++){\n            for(let i2 = 0; i2 < arr[i].length; i2++){\n                result.push(arr[i][i2]);\n            }\n        }\n        return result;\n    }\n    static clamp(num, min, max){\n        return (num <= min) ? min : ((num >= max) ? max : num);\n    }\n};\nUtils.DIRS4 = [\n    new Vector(1, 0),\n    new Vector(0, 1),\n    new Vector(-1, 0),\n    new Vector(0, -1)\n];\n\nmodule.exports = {\n    Vector: Vector,\n    Dimensions: Dimensions,\n    Rect: Rect,\n    Array2D: Array2D,\n    MouseButton: MouseButton,\n    Utils: Utils\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Utils.js","import React from 'react';\n\nclass TestCanvas extends React.Component{\n    componentDidMount(){\n    }\n    render(){\n        return (\n<canvas width=\"10\" height=\"10\" style={{\n}} ref={canvas => {this.canvas = canvas;}} />\n        );\n    }\n};\nTestCanvas.propTypes = {\n};\n\nmodule.exports = TestCanvas;\n\n\n\n// WEBPACK FOOTER //\n// ./src/reactComponents/TestCanvas.jsx","import WebGLStateManager from 'webgl/WebGLStateManager.js';\nimport GPGPUManager from 'gpgpu/GPGPUManager.js';\nimport {Dimensions, Utils} from 'utils/Utils.js';\nimport GPUDFT from 'gpgpu/GPUDFT.js';\nimport GPUFFT from 'gpgpu/GPUFFT.js';\nimport GPUSTFT from 'gpgpu/GPUSTFT.js';\nimport GPUIFFT from 'gpgpu/GPUIFFT.js';\nimport GPUISTFT from 'gpgpu/GPUISTFT.js';\nimport SpectrogramKernel from 'engine/SpectrogramKernel.js';\nimport ComplexArray2D from 'gpgpu/ComplexArray2D.js';\n\nclass TestUtils{\n    static compareArrays(arr1, arr2, cmpFunc = TestUtils.defaultEquals){\n        //const badIndex = arr1.findIndex((val, i) => !cmpFunc(val, arr2[i]));\n        //if(badIndex != -1){\n        //    console.log(\n        //        badIndex.toString() + ' ' + arr1[badIndex].toString() + ' ' + arr2[badIndex].toString()\n        //    );\n        //}\n        return arr1.length == arr2.length && arr1.every((val, i) => cmpFunc(val, arr2[i]));\n    }\n    static compareArray2D(arr1, arr2, cmpFunc = TestUtils.defaultEquals){\n        if(!arr1.dims.equals(arr2.dims)){\n            return false;\n        }\n        for(let i = 0; i < arr1.dims.height; i++){\n            for(let i2 = 0; i2 < arr1.dims.width; i2++){\n                if(!cmpFunc(arr1.data[i][i2], arr2.data[i][i2])){\n                    //console.log(i.toString() + ' ' + i2.toString() + ' ' + arr1.data[i][i2].toString() + ' ' + arr2.data[i][i2].toString());\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static compareComplexArray2D(manager, arr1, arr2, cmpFunc = TestUtils.defaultEquals){\n        const arrs1 = arr1.getCPUArrs(manager);\n        const arrs2 = arr2.getCPUArrs(manager);\n        return TestUtils.compareArray2D(arrs1[0], arrs2[0], cmpFunc) &&\n            TestUtils.compareArray2D(arrs1[1], arrs2[1], cmpFunc);\n    }\n    static defaultEquals(x, y){\n        return x == y;\n    }\n    static floatEquals(x, y, rtol = 1e-5, atol = 1e-9){\n        const absX = Math.abs(x);\n        const absY = Math.abs(y);\n        const diff = Math.abs(x - y);\n        if(x == y) return true;\n        if(x == 0 || y == 0) return diff < atol;\n        return diff < atol || diff / (absX + absY) < rtol;\n    }\n    static processTestResult(testName, assertVal){\n        //console.log(assertVal);\n        console.log(testName + ': ' + (assertVal ? 'OK' : 'FAILED'));\n        //if(!assertVal) console.log('Test failed: ' + testName);\n    }\n};\n\nclass GPGPUUnitTests{\n    static run(){\n        const stateManager = GPGPUManager.createWebGLStateManager();\n        const testDims = new Dimensions(5, 6);\n        const randArr = Utils.compute2DArrayAsArray2D(\n            testDims,\n            pos => Math.random()\n        );\n        const randArr2 = Utils.compute2DArrayAsArray2D(\n            testDims,\n            pos => Math.random()\n        );\n        const toGPUAndBack = (manager, arr, singleChannel = true) => {\n            const gpuArr = manager.arrToGPUArr(arr, singleChannel);\n            const resArr = manager.gpuArrToArr(gpuArr, singleChannel);\n            manager.disposeGPUArr(gpuArr);\n            return resArr;\n        };\n        (() => {\n            const manager = new GPGPUManager(stateManager, true);\n            (() => {\n                const resArr = toGPUAndBack(manager, randArr);\n                TestUtils.processTestResult(\n                    'Data transfer (float, single channel)',\n                    TestUtils.compareArray2D(randArr, resArr, TestUtils.floatEquals)\n                );\n            })();\n            (() => {\n                const packedRandArr = Utils.compute2DArrayAsArray2D(\n                    testDims,\n                    pos => [randArr.data[pos.y][pos.x], randArr2.data[pos.y][pos.x], 0, 0]\n                );\n                const resArr = toGPUAndBack(manager, packedRandArr, false);\n                TestUtils.processTestResult(\n                    'Data transfer (float, multichannel)',\n                    TestUtils.compareArray2D(packedRandArr, resArr,\n                        (arr1, arr2) => TestUtils.floatEquals(arr1[0], arr2[0]) && TestUtils.floatEquals(arr1[1], arr2[1])\n                    )\n                );\n            })();\n            manager.dispose();\n        })();\n        (() => {\n            const manager = new GPGPUManager(stateManager, false);\n            (() => {\n                const resArr = toGPUAndBack(manager, randArr);\n                TestUtils.processTestResult(\n                    'Data transfer (packed)',\n                    TestUtils.compareArray2D(randArr, resArr, TestUtils.floatEquals)\n                );\n            })();\n            (() => {\n                const gpuArr1 = manager.arrToGPUArr(randArr);\n                const gpuArr2 = manager.arrToGPUArr(randArr2);\n                (() => {\n                    const addKernel = manager.createKernel(\n`gl_FragData[0] = packFloat(\n    unpackFloat(texture2D(uArr1, vCoord)) +\n    unpackFloat(texture2D(uArr2, vCoord))\n);\n`,\n                        ['uArr1', 'uArr2'], [], 1,\n                        GPGPUManager.PACK_FLOAT_INCLUDE\n                    );\n                    const resGPUArr = manager.runKernel(addKernel, [\n                        gpuArr1,\n                        gpuArr2\n                    ], testDims)[0];\n                    manager.disposeKernel(addKernel);\n                    const resArr = manager.gpuArrToArr(resGPUArr);\n                    manager.disposeGPUArr(resGPUArr);\n                    const cmpArr = Utils.compute2DArrayAsArray2D(testDims,\n                        pos => randArr.data[pos.y][pos.x] + randArr2.data[pos.y][pos.x]\n                    );\n                    TestUtils.processTestResult(\n                        'Kernel run',\n                        TestUtils.compareArray2D(cmpArr, resArr, TestUtils.floatEquals)\n                    );\n                })();\n                (() => {\n                    const addsubKernel = manager.createKernel(\n`gl_FragData[0] = packFloat(\n    unpackFloat(texture2D(uArr1, vCoord)) +\n    unpackFloat(texture2D(uArr2, vCoord))\n);\ngl_FragData[1] = packFloat(\n    unpackFloat(texture2D(uArr1, vCoord)) -\n    unpackFloat(texture2D(uArr2, vCoord))\n);\n`,\n                        ['uArr1', 'uArr2'], [], 2,\n                        GPGPUManager.PACK_FLOAT_INCLUDE\n                    );\n                    const resGPUArrs = manager.runKernel(addsubKernel, [\n                        gpuArr1,\n                        gpuArr2\n                    ], testDims);\n                    manager.disposeKernel(addsubKernel);\n                    const resArr1 = manager.gpuArrToArr(resGPUArrs[0]);\n                    const resArr2 = manager.gpuArrToArr(resGPUArrs[1]);\n                    manager.disposeGPUArr(resGPUArrs[0]);\n                    manager.disposeGPUArr(resGPUArrs[1]);\n                    const cmpArr1 = Utils.compute2DArrayAsArray2D(testDims,\n                        pos => randArr.data[pos.y][pos.x] + randArr2.data[pos.y][pos.x]\n                    );\n                    const cmpArr2 = Utils.compute2DArrayAsArray2D(testDims,\n                        pos => randArr.data[pos.y][pos.x] - randArr2.data[pos.y][pos.x]\n                    );\n                    TestUtils.processTestResult(\n                        'Kernal multiple outputs',\n                        TestUtils.compareArray2D(cmpArr1, resArr1, TestUtils.floatEquals) &&\n                        TestUtils.compareArray2D(cmpArr2, resArr2, TestUtils.floatEquals)\n                    );\n                })();\n                (() => {\n                    const multKernel = manager.createKernel(\n`gl_FragData[0] = packFloat(\n    unpackFloat(texture2D(uArr, vCoord)) * uMult\n);\n`,\n                    ['uArr'], [\n                        {\n                            type: 'float',\n                            name: 'uMult'\n                        }\n                    ], 1, GPGPUManager.PACK_FLOAT_INCLUDE);\n                    const mult = Math.random();\n                    const resGPUArr = manager.runKernel(multKernel, [\n                        gpuArr1\n                    ], testDims, {\n                        uMult: mult\n                    })[0];\n                    manager.disposeKernel(multKernel);\n                    const resArr = manager.gpuArrToArr(resGPUArr);\n                    manager.disposeGPUArr(resGPUArr);\n                    const cmpArr = Utils.compute2DArrayAsArray2D(testDims,\n                        pos => randArr.data[pos.y][pos.x] * mult\n                    );\n                    TestUtils.processTestResult(\n                        'Kernel uniform',\n                        TestUtils.compareArray2D(cmpArr, resArr, TestUtils.floatEquals)\n                    );\n                })();\n                manager.disposeGPUArr(gpuArr1);\n                manager.disposeGPUArr(gpuArr2);\n            })();\n            manager.dispose();\n        })();\n        (() => {\n            const manager = new GPGPUManager(stateManager, true);\n            (() => {\n                const gpuArr = manager.flatArrToGPUArr(\n                    Utils.flatten(randArr.data),\n                    randArr.dims, 1\n                );\n                const resArr = manager.gpuArrToArr(gpuArr, true, 1);\n                manager.disposeGPUArr(gpuArr);\n                TestUtils.processTestResult(\n                    'Kernel-based data transfer (float, flat alpha)',\n                    TestUtils.compareArray2D(randArr, resArr, TestUtils.floatEquals)\n                );\n            })();\n            manager.dispose();\n        })();\n    }\n};\n\nclass FFTUnitTests{\n    static run(){\n        const stateManager = GPGPUManager.createWebGLStateManager();\n        const manager = new GPGPUManager(stateManager, false);\n        const managerFloat = new GPGPUManager(stateManager, true);\n        const testDims = new Dimensions(1, 128);\n        const randArr = ComplexArray2D.fromRealArr(\n            Utils.compute2DArrayAsArray2D(\n                testDims,\n                pos => Math.random()\n            )\n        );\n        const randFloatArr = ComplexArray2D.fromArrs(\n            Utils.compute2DArrayAsArray2D(\n                testDims,\n                pos => randArr.getCPUArrs()[0].data[pos.y][pos.x]\n            ),\n            Utils.compute2DArrayAsArray2D(\n                testDims,\n                pos => 0\n            )\n        );\n        const gpuDFT = new GPUDFT(manager);\n        const gpuFFT = new GPUFFT(manager);\n        const gpuFFTFloat = new GPUFFT(managerFloat);\n        const gpuIFFT = new GPUIFFT(managerFloat);\n        const dftArrs = gpuDFT.parallelDFT(randArr);\n        const fftArrs = gpuFFT.parallelFFT(randArr);\n        const fftFloatArrs = gpuFFTFloat.parallelFFT(randFloatArr);\n        const identityArrs = gpuIFFT.parallelIFFT(fftFloatArrs);\n        gpuDFT.dispose();\n        gpuFFT.dispose();\n        gpuFFTFloat.dispose();\n        gpuIFFT.dispose();\n        randArr.dispose(manager);\n        randFloatArr.dispose(managerFloat);\n        TestUtils.processTestResult(\n            'GPU FFT vs DFT',\n            TestUtils.compareComplexArray2D(manager, dftArrs, fftArrs, (x, y) => TestUtils.floatEquals(x, y, 1e-3, 1e-3))\n        );\n        const fftCPUArrs = fftArrs.getCPUArrs(manager);\n        const fftFloatCPUArrs = fftFloatArrs.getCPUArrs(managerFloat);\n        TestUtils.processTestResult(\n            'GPU FFT packed vs float',\n            TestUtils.compareArray2D(fftCPUArrs[0], fftFloatCPUArrs[0], (x, y) => TestUtils.floatEquals(x, y, 1e-3)) &&\n            TestUtils.compareArray2D(fftCPUArrs[1], fftFloatCPUArrs[1], (x, y) => TestUtils.floatEquals(x, y, 1e-3))\n        );\n        TestUtils.processTestResult(\n            'GPU FFT-IFFT vs identity',\n            TestUtils.compareComplexArray2D(managerFloat, identityArrs, randFloatArr, (x, y) => TestUtils.floatEquals(x / testDims.height, y, 1e-3, 1e-3))\n        );\n        dftArrs.dispose(manager);\n        fftArrs.dispose(manager);\n        fftFloatArrs.dispose(managerFloat);\n        identityArrs.dispose(managerFloat);\n        manager.dispose();\n        managerFloat.dispose();\n    }\n};\n\nclass STFTUnitTests{\n    static manualSTFT(gpgpuManager, arr, windSz){\n        const numWind = parseInt(arr.length / (windSz / 2)) - 1;\n        const spectroDims = new Dimensions(numWind, windSz / 2);\n        const windFunc = Utils.compute1DArray(windSz,\n            i => 0.5 * (1 - Math.cos(2 * Math.PI * (i * 2 + 1) / (windSz * 2)))\n        );\n        const fftInput = ComplexArray2D.fromRealArr(\n            Utils.compute2DArrayAsArray2D(\n                new Dimensions(spectroDims.width, windSz),\n                pos => arr[pos.x * (windSz / 2) + pos.y] * windFunc[pos.y]\n            )\n        );\n        const gpuFFT = new GPUFFT(gpgpuManager);\n        const spectrum = gpuFFT.parallelFFT(fftInput);\n        fftInput.dispose(gpgpuManager);\n        gpuFFT.dispose();\n        return spectrum;\n    }\n    static run(){\n        const gpgpuManager = new GPGPUManager(null, true);\n        const gpuSTFT = new GPUSTFT(gpgpuManager);\n        const gpuISTFT = new GPUISTFT(gpgpuManager);\n        const testLength = 128;\n        const windSz = 16;\n        const randArr = Utils.compute1DArray(\n            testLength,\n            i => Math.random()\n        );\n        const resArr = gpuSTFT.stft(randArr, windSz);\n        const identityArr = gpuISTFT.istft(resArr);\n        const manualResArr = STFTUnitTests.manualSTFT(gpgpuManager, randArr, windSz);\n        gpuSTFT.dispose();\n        gpuISTFT.dispose();\n        TestUtils.processTestResult(\n            'Manual vs GPU STFT',\n            TestUtils.compareComplexArray2D(gpgpuManager, manualResArr, resArr, (x, y) => TestUtils.floatEquals(x, y, 1e-3))\n        );\n        const slicedIdentityArr = identityArr.slice(windSz / 2, -windSz / 2).map(x => x / windSz);\n        const slicedRandArr = randArr.slice(windSz / 2, -windSz / 2);\n        TestUtils.processTestResult(\n            'GPU STFT-ISTFT vs identity',\n            TestUtils.compareArrays(slicedIdentityArr, slicedRandArr, (x, y) => TestUtils.floatEquals(x, y, 1e-3))\n        );\n        resArr.dispose(gpgpuManager);\n        manualResArr.dispose(gpgpuManager);\n        gpgpuManager.dispose();\n    }\n};\n\nclass SpectrogramUnitTests{\n    static manualSpectrogram(data, magRange, magOffset){\n        const res = Utils.flatten(Utils.flatten(\n            Utils.compute2DArray(\n                data.dims,\n                pos => Math.sqrt(\n                    Math.pow(data.getCPUArrs()[0].data[pos.y][pos.x], 2) +\n                    Math.pow(data.getCPUArrs()[1].data[pos.y][pos.x], 2)\n                ) / Math.sqrt(data.dims.height)\n            ).slice(0, data.dims.height / 2)\n        ).map(mag => [\n            Utils.clamp(Math.log(mag) / magRange + magOffset, 0, 1),\n            0, 0, 1\n        ]));\n        return res;\n    }\n    static run(){\n        const testDims = new Dimensions(5, 6);\n        const randArr = ComplexArray2D.fromArrs(\n            Utils.compute2DArrayAsArray2D(\n                testDims,\n                pos => Math.random()\n            ),\n            Utils.compute2DArrayAsArray2D(\n                testDims,\n                pos => Math.random()\n            )\n        );\n        const magRange = 5, magOffset = 1;\n        const expectedArr = SpectrogramUnitTests.manualSpectrogram(randArr, magRange, magOffset);\n        const manager = new GPGPUManager(null, true);\n        const spectroKernel = new SpectrogramKernel(manager);\n        const resGPUArr = spectroKernel.run(randArr, magRange, magOffset);\n        spectroKernel.dispose();\n        const resArr = Array.from(manager.gpuArrToFlatArr(resGPUArr, true)).map(\n            val => val / 255\n        );\n        manager.disposeGPUArr(resGPUArr);\n        TestUtils.processTestResult(\n            'Manual vs GPU spectrogram',\n            TestUtils.compareArrays(expectedArr, resArr, (x, y) => TestUtils.floatEquals(x, y, 1e-1))\n        );\n        manager.dispose();\n    }\n};\n\nclass UnitTestsManager{\n    static runAllTests(){\n        GPGPUUnitTests.run();\n        FFTUnitTests.run();\n        STFTUnitTests.run();\n        SpectrogramUnitTests.run();\n    }\n};\n\nmodule.exports = UnitTestsManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/tests/UnitTestsManager.js","import QuadDrawingUtils from 'webgl/QuadDrawingUtils.js';\n\nclass WebGLStateManager{\n    constructor(ctx){\n        this.ctx = ctx;\n        this.numAttribsEnabled = 0;\n        this.lazyQuadPosBuff = null;\n        this.lazyQuadIndexBuff = null;\n    }\n    getQuadPosBuff(){\n        if(this.lazyQuadPosBuff == null)\n            this.lazyQuadPosBuff = this.createStaticArrBuff(this.ctx.ARRAY_BUFFER, QuadDrawingUtils.QUAD_POS_ARR);\n        return this.lazyQuadPosBuff;\n    }\n    getQuadIndexBuff(){\n        if(this.lazyQuadIndexBuff == null)\n            this.lazyQuadIndexBuff = this.createStaticArrBuff(this.ctx.ELEMENT_ARRAY_BUFFER, QuadDrawingUtils.QUAD_INDEX_ARR);\n        return this.lazyQuadIndexBuff;\n    }\n    createStaticArrBuff(type, contents){\n        const buff = this.ctx.createBuffer();\n        this.ctx.bindBuffer(type, buff);\n        this.ctx.bufferData(type, contents, this.ctx.STATIC_DRAW);\n        return buff;\n    }\n    enableAttribs(numAttribs){\n        while(this.numAttribsEnabled > numAttribs){\n            this.numAttribsEnabled--;\n            this.ctx.disableVertexAttribArray(this.numAttribsEnabled);\n        }\n        while(this.numAttribsEnabled < numAttribs){\n            this.ctx.enableVertexAttribArray(this.numAttribsEnabled);\n            this.numAttribsEnabled++;\n        }\n    }\n    dispose(){\n        if(this.lazyQuadPosBuff != null)\n            this.ctx.deleteBuffer(this.lazyQuadPosBuff);\n        if(this.lazyQuadIndexBuff != null)\n            this.ctx.deleteBuffer(this.lazyQuadIndexBuff);\n    }\n};\n\nmodule.exports = WebGLStateManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/webgl/WebGLStateManager.js","import {Rect} from 'utils/Utils.js';\nimport ShaderUtils from 'webgl/ShaderUtils.js';\n\nclass QuadDrawingUtils{\n    static createVertShaderSrc(transforms = [], dynamicDims = false, dynamicPos = false, coordSystem = QuadDrawingUtils.TEX_COORD_SYSTEM.img){\n        if(dynamicDims)\n            transforms.push(QuadDrawingUtils.TRANSFORMS.scale);\n        if(dynamicPos)\n            transforms.push(QuadDrawingUtils.TRANSFORMS.translate);\n        const res =\n`precision highp float;\n\nattribute vec2 aPos;\n\n` + (dynamicDims ? `uniform vec2 uScale;\n` : '') + (dynamicPos ? `uniform vec2 uTranslate;\n` : '') + `\nvarying vec2 vCoord;\n\nvoid main(){\n    vec2 pos = aPos;\n` + transforms.map((line) => '    ' + line).join('\\n') +`\n    vec2 glPos = vec2(pos.x * 2.0 - 1.0, pos.y * 2.0 - 1.0);\n    gl_Position = vec4(glPos, 0.0, 1.0);\n    ` + coordSystem + `\n}`;\n        return res;\n    }\n    static createDirectDrawFragShaderSrc(){\n        const res =\n`precision highp float;\nprecision highp sampler2D;\n\nuniform sampler2D uImg;\n\nvarying vec2 vCoord;\n\nvoid main(){\n    gl_FragData[0] = texture2D(uImg, vCoord);\n}\n`;\n        return res;\n    }\n    static createQuadArray(rect){\n        return new Float32Array([\n            rect.left, rect.bottom,\n            rect.left, rect.top,\n            rect.right, rect.top,\n            rect.right, rect.bottom\n        ]);\n    }\n};\nQuadDrawingUtils.TRANSFORMS = {\n    flipX: 'pos.x = 1.0 - pos.x;',\n    flipY: 'pos.y = 1.0 - pos.y;',\n    scale: 'pos = pos * uScale;',\n    translate: 'pos = pos + uTranslate;'\n};\nQuadDrawingUtils.TEX_COORD_SYSTEM = {\n    gl: 'vCoord = glPos;',\n    img: 'vCoord = aPos;'\n};\nQuadDrawingUtils.QUAD_POS_ARR = QuadDrawingUtils.createQuadArray(\n    Rect.fromBounds(0, 1, 0, 1)\n);\nQuadDrawingUtils.QUAD_INDEX_ARR = new Uint16Array([\n    0, 1, 2,\n    0, 2, 3\n]);\nQuadDrawingUtils.QUAD_NUM_VERT = 6;\n\n\nmodule.exports = QuadDrawingUtils;\n\n\n\n// WEBPACK FOOTER //\n// ./src/webgl/QuadDrawingUtils.js","class WebGLProgramInfo{\n    constructor(program, vertShader, fragShader){\n        this.program = program;\n        this.vertShader = vertShader;\n        this.fragShader = fragShader;\n    }\n};\n\nclass ShaderUtils{\n    static compileShader(ctx, src, type){\n        const shader = ctx.createShader(type);\n        ctx.shaderSource(shader, src);\n        ctx.compileShader(shader);\n        if(!ctx.getShaderParameter(shader, ctx.COMPILE_STATUS)){\n            console.log(src);\n            throw 'Shader compile error: ' + ctx.getShaderInfoLog(shader);\n        }\n        return shader;\n    }\n    static createProgram(ctx, vertSrc, fragSrc){\n        const program = ctx.createProgram();\n        const vertShader = ShaderUtils.compileShader(ctx, vertSrc, ctx.VERTEX_SHADER);\n        const fragShader = ShaderUtils.compileShader(ctx, fragSrc, ctx.FRAGMENT_SHADER);\n        ctx.attachShader(program, vertShader);\n        ctx.attachShader(program, fragShader);\n        ctx.linkProgram(program);\n        return new WebGLProgramInfo(program, vertShader, fragShader);\n    }\n    static registerTextures(ctx, program, texNames){\n        texNames.forEach((texName, i) => {\n            const texLoc = ctx.getUniformLocation(program, texName);\n            ctx.uniform1i(texLoc, i);\n        });\n    }\n    static registerVectorUniform(ctx, program, uniformName, val){\n        const uniformLoc = ctx.getUniformLocation(program, uniformName);\n        ctx.uniform2fv(uniformLoc, val.toArray());\n    }\n    static setVertAttrib(ctx, program, attribName, itemSize, buff){\n        const attrib = ctx.getAttribLocation(program, attribName);\n        ctx.bindBuffer(ctx.ARRAY_BUFFER, buff);\n        ctx.vertexAttribPointer(attrib, itemSize, ctx.FLOAT, false, 0, 0);\n    }\n    static bindTextures(ctx, textures){\n        textures.forEach((texture, i) => {\n            ctx.activeTexture(ctx['TEXTURE' + i.toString()]);\n            ctx.bindTexture(ctx.TEXTURE_2D, texture);\n        });\n    }\n    static disposeProgram(ctx, programInfo){\n        ctx.detachShader(programInfo.program, programInfo.vertShader);\n        ctx.detachShader(programInfo.program, programInfo.fragShader);\n        ctx.deleteShader(programInfo.vertShader);\n        ctx.deleteShader(programInfo.fragShader);\n        ctx.deleteProgram(programInfo.program);\n    }\n};\n\nmodule.exports = ShaderUtils;\n\n\n\n// WEBPACK FOOTER //\n// ./src/webgl/ShaderUtils.js","import ShaderUtils from 'webgl/ShaderUtils.js';\nimport QuadDrawingUtils from 'webgl/QuadDrawingUtils.js';\nimport {Rect, Array2D, Utils} from 'utils/Utils.js';\nimport WebGLStateManager from 'webgl/WebGLStateManager.js';\n\nclass GPUArray{\n    constructor(dims, tex){\n        this.dims = dims;\n        this.tex = tex;\n    }\n};\n\nclass GPGPUKernel{\n    constructor(programInfo, params = [], numOutputs = 1){\n        this.programInfo = programInfo;\n        this.params = params;\n        this.numOutputs = numOutputs;\n    }\n    get program(){\n        return this.programInfo.program;\n    }\n};\n\nclass GPGPUManager{\n    constructor(stateManager = null, useFloat = true){\n        this.embeddedStateManager = stateManager == null;\n        if(this.embeddedStateManager){\n            stateManager = GPGPUManager.createWebGLStateManager();\n        }\n        this.stateManager = stateManager;\n        this.useFloat = useFloat;\n\n        this.extDB = this.ctx.getExtension('WEBGL_draw_buffers');\n        if(this.useFloat){\n            this.ctx.getExtension('OES_texture_float');\n        }\n    }\n    get ctx(){\n        return this.stateManager.ctx;\n    }\n    get quadPosBuff(){\n        return this.stateManager.getQuadPosBuff();\n    }\n    get quadIndexBuff(){\n        return this.stateManager.getQuadIndexBuff();\n    }\n    static createGPGPUCanvasContext(canvas = null){\n        if(canvas == null){\n            canvas = document.createElement('canvas');\n            canvas.width = 1;\n            canvas.height = 1;\n        }\n        const options = {\n            depth: false,\n            antialias: false\n        };\n        return canvas.getContext('webgl', options) || canvas.getContext('webgl-experimental', options);\n    };\n    static createWebGLStateManager(canvas = null){\n        return new WebGLStateManager(\n            this.createGPGPUCanvasContext(canvas)\n        );\n    }\n    createComputeTexture(dims, type = this.ctx.FLOAT, contents = null, format = this.ctx.RGBA){\n        const tex = this.ctx.createTexture();\n        this.ctx.bindTexture(this.ctx.TEXTURE_2D, tex);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_MIN_FILTER, this.ctx.NEAREST);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_MAG_FILTER, this.ctx.NEAREST);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_WRAP_S, this.ctx.CLAMP_TO_EDGE);\n        this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_WRAP_T, this.ctx.CLAMP_TO_EDGE);\n        this.ctx.texImage2D(this.ctx.TEXTURE_2D, 0, format, dims.width, dims.height, 0, format, type, contents);\n        return tex;\n    }\n    createFBO(textures){\n        const fbo = this.ctx.createFramebuffer();\n        this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, fbo);\n        if(textures.length > 1){\n            this.extDB.drawBuffersWEBGL(Utils.compute1DArray(\n                textures.length,\n                i => this.extDB['COLOR_ATTACHMENT' + i.toString() + '_WEBGL']\n            ));\n            textures.forEach((tex, i) => {\n                this.ctx.framebufferTexture2D(\n                    this.ctx.FRAMEBUFFER,\n                    this.extDB['COLOR_ATTACHMENT' + i.toString() + '_WEBGL'],\n                    this.ctx.TEXTURE_2D, tex, 0\n                );\n            });\n        }\n        else{\n            this.ctx.framebufferTexture2D(this.ctx.FRAMEBUFFER, this.ctx.COLOR_ATTACHMENT0, this.ctx.TEXTURE_2D, textures[0], 0);\n        }\n        if(this.ctx.checkFramebufferStatus(this.ctx.FRAMEBUFFER) != this.ctx.FRAMEBUFFER_COMPLETE){\n            throw 'GL_FRAMEBUFFER_COMPLETE failed.';\n        }\n        return fbo;\n    }\n    registerUniforms(program, uniforms, vals){\n        uniforms.forEach(uniform => {\n            const uniformLoc = this.ctx.getUniformLocation(program, uniform.name);\n            if(uniform.type == 'int'){\n                this.ctx.uniform1i(uniformLoc, vals[uniform.name]);\n            }\n            else if(uniform.type == 'float'){\n                this.ctx.uniform1f(uniformLoc, vals[uniform.name]);\n            }\n            else if(/^ivec[2-4]$/g.test(uniform.type)){\n                this.ctx['uniform' + uniform.type[4].toString() + 'iv'](uniformLoc, new Int32Array(vals[uniform.name]));\n            }\n            else if(/^vec[2-4]$/g.test(uniform.type)){\n                this.ctx['uniform' + uniform.type[3].toString() + 'fv'](uniformLoc, new Float32Array(vals[uniform.name]));\n            }\n        });\n    }\n    drawQuad(program){\n        this.ctx.useProgram(program);\n        this.stateManager.enableAttribs(1);\n        this.ctx.bindBuffer(this.ctx.ELEMENT_ARRAY_BUFFER, this.quadIndexBuff);\n        this.ctx.drawElements(this.ctx.TRIANGLE_STRIP, QuadDrawingUtils.QUAD_NUM_VERT, this.ctx.UNSIGNED_SHORT, 0);\n    }\n    disposeGPUArr(gpuArr){\n        this.ctx.deleteTexture(gpuArr.tex);\n    }\n    numChannelsToFormat(numChannels){\n        if(numChannels === 1) return this.ctx.ALPHA;\n        else if(numChannels === 2) throw 'WebGL 1.0 does not support RG textures.';\n        else if(numChannels === 3) return this.ctx.RGB;\n        else if(numChannels === 4) return this.ctx.RGBA;\n        else throw 'Unsupported number of channels.';\n    }\n    flatArrToGPUArr(arr, dims, numChannels = 4){\n        if(!this.useFloat && numChannels != 4)\n            throw 'Packed float arrays require 4 channels.';\n        const format = this.numChannelsToFormat(numChannels);\n        const floatArr = new Float32Array(arr);\n        return new GPUArray(\n            dims,\n            this.createComputeTexture(dims, this.useFloat ? this.ctx.FLOAT : this.ctx.UNSIGNED_BYTE, this.useFloat ? floatArr : new Uint8Array(floatArr.buffer), format)\n        );\n    }\n    arrToGPUArr(arr, singleChannel = true){\n        if(!this.useFloat && !singleChannel)\n            throw 'Cannot pack multiple packed float channels.';\n        const pixelFlatArr = Utils.flatten(arr.data);\n        const flatArr = this.useFloat ? Utils.flatten(\n            singleChannel ?\n            pixelFlatArr.map(val => [val, 0, 0, 0]) :\n            pixelFlatArr\n        ) : pixelFlatArr;\n        return this.flatArrToGPUArr(flatArr, arr.dims);\n    }\n    gpuArrToFlatArr(gpuArr, overrideFloat = false){\n        const fbo = this.createFBO([gpuArr.tex]);\n        this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, fbo);\n        const buffLen = gpuArr.dims.getArea() * 4;\n        const buff = (this.useFloat && !overrideFloat) ?\n            new Float32Array(buffLen) :\n            new Uint8Array(buffLen);\n        this.ctx.readPixels(0, 0, gpuArr.dims.width, gpuArr.dims.height, this.ctx.RGBA, (this.useFloat && !overrideFloat) ? this.ctx.FLOAT : this.ctx.UNSIGNED_BYTE, buff);\n        this.ctx.deleteFramebuffer(fbo);\n        return this.useFloat ? buff : new Float32Array(buff.buffer);\n    }\n    gpuArrToArr(gpuArr, singleChannel = true, numTexChannels = 4, overrideFloat = false){\n        if(!this.useFloat && !singleChannel)\n            throw 'Cannot pack multiple packed float channels.';\n        if(!this.useFloat && numTexChannels != 4)\n            throw 'Packed float arrays require 4 channels.';\n        const copyArr = numTexChannels != 4;\n        if(copyArr) gpuArr = this.copyGPUArr(gpuArr, numTexChannels, 4);\n        const flatArr = this.gpuArrToFlatArr(gpuArr, overrideFloat);\n        if(copyArr) this.disposeGPUArr(gpuArr);\n        const arrData = Utils.compute2DArray(gpuArr.dims, pos => {\n            const offset = pos.y * gpuArr.dims.width + pos.x;\n            return this.useFloat ? (\n                singleChannel ?\n                flatArr[offset * 4] :\n                flatArr.slice(offset * 4, (offset + 1) * 4)\n            ) : flatArr[offset];\n        });\n        return new Array2D(gpuArr.dims, arrData);\n    }\n    createCopyKernel(srcNumChannels = 4, destNumChannels = srcNumChannels){\n        if(!this.useFloat && (srcNumChannels != 4 || destNumChannels != 4))\n            throw 'Packed float arrays require 4 channels.';\n        let extractCode = null, placeCode = null;\n        if(srcNumChannels == 1)\n            extractCode = 'vec4(texture2D(uArr, vCoord).a, 0.0, 0.0, 0.0)';\n        else if(srcNumChannels === 2) throw 'WebGL 1.0 does not support RG textures.';\n        else if(srcNumChannels === 3 || srcNumChannels === 4)\n            extractCode = 'texture2D(uArr, vCoord)';\n        else throw 'Unsupported number of channels.';\n        if(destNumChannels == 1)\n            placeCode = 'vec4(0.0, 0.0, 0.0, data.r)';\n        else if(destNumChannels === 2) throw 'WebGL 1.0 does not support RG textures.';\n        else if(destNumChannels === 3 || destNumChannels == 4)\n            placeCode = 'data';\n        else throw 'Unsupported number of channels.';\n        return this.createKernel(\n`vec4 data = ` + extractCode + `;\ngl_FragData[0] = ` + placeCode + `;\n`,\n        ['uArr'], [], 1);\n    }\n    copyGPUArr(gpuArr, srcNumChannels = 4, destNumChannels = srcNumChannels){\n        const copyKernel = this.createCopyKernel(srcNumChannels, destNumChannels);\n        const resGPUArr = this.runKernel(copyKernel, [\n            gpuArr\n        ], gpuArr.dims)[0];\n        this.disposeKernel(copyKernel);\n        return resGPUArr;\n    }\n    disposeProgram(programInfo){\n        this.ctx.detachShader(programInfo.program, programInfo.vertShader);\n        this.ctx.detachShader(programInfo.program, programInfo.fragShader);\n        this.ctx.deleteShader(programInfo.vertShader);\n        this.ctx.deleteShader(programInfo.fragShader);\n        this.ctx.deleteProgram(programInfo.program);\n    }\n    createKernel(computeFunc, inputNames, params = [], numOutputs = 1, includeSrc = ''){\n        const uniforms = [].concat(params, inputNames.map(\n            inputName => ({\n                type: 'sampler2D',\n                name: inputName\n            })\n\n        ), [{\n            type: 'ivec2',\n            name: 'uDims'\n        }]);\n        const vertShaderSrc = GPGPUManager.createVertShaderSrc();\n        const fragShaderSrc = GPGPUManager.createFragShaderSrc(\n            computeFunc.trim().split('\\n').map(line =>\n                '    ' + line\n            ).join('\\n') + '\\n',\n            uniforms, includeSrc, numOutputs > 1\n        );\n        const programInfo = ShaderUtils.createProgram(this.ctx, vertShaderSrc, fragShaderSrc);\n        const program = programInfo.program;\n\n        this.ctx.useProgram(program);\n        ShaderUtils.setVertAttrib(this.ctx, program, 'aPos', 2, this.quadPosBuff)\n        ShaderUtils.registerTextures(this.ctx, program, inputNames);\n        return new GPGPUKernel(programInfo, params, numOutputs);\n    }\n    runKernel(kernel, inputArrs, outputDims, paramVals = {}, colorOutput = false, drawDirect = false){\n        this.ctx.useProgram(kernel.program);\n        this.registerUniforms(kernel.program, kernel.params, paramVals);\n        this.registerUniforms(kernel.program, [{\n            name: 'uDims',\n            type: 'ivec2'\n        }], {\n            uDims: outputDims.toArray()\n        });\n\n        const outputTextures = Utils.compute1DArray(kernel.numOutputs, i =>\n            this.createComputeTexture(outputDims, (this.useFloat && !colorOutput) ? this.ctx.FLOAT : this.ctx.UNSIGNED_BYTE)\n        );\n\n        const fbo = drawDirect ? null : this.createFBO(outputTextures);\n        this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, fbo);\n\n        ShaderUtils.bindTextures(this.ctx, inputArrs.map(gpuArr => gpuArr.tex));\n\n        this.ctx.viewport(0, 0, outputDims.width, outputDims.height);\n        this.drawQuad(kernel.program);\n\n        if(fbo != null) this.ctx.deleteFramebuffer(fbo);\n\n        return outputTextures.map(tex =>\n            new GPUArray(outputDims, tex)\n        );\n    }\n    disposeKernel(kernel){\n        ShaderUtils.disposeProgram(this.ctx, kernel.programInfo);\n    }\n    dispose(){\n        if(this.embeddedStateManager)\n            this.stateManager.dispose();\n    }\n};\n\n// Credit: https://gist.github.com/TooTallNate/4750953\nGPGPUManager.ENDIANNESS = (() => {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] == 0xef) return 'LE';\n    if (c[0] == 0xde) return 'BE';\n    throw new Error('unknown endianness');\n})();\n\nGPGPUManager.createVertShaderSrc = (drawDirect = false) =>\n    QuadDrawingUtils.createVertShaderSrc(\n        drawDirect ? [QuadDrawingUtils.TRANSFORMS.flipY] : []\n    );\n\n///\n/// Adapted from gpu.js\n/// http://gpu.rocks/\n///\n/// GPU Accelerated JavaScript\n///\n/// @version 0.0.0\n/// @date    Mon Jul 04 2016 00:47:07 GMT+0800 (SGT)\n///\n/// @license MIT\n/// The MIT License\n///\n/// Copyright (c) 2016 Fazli Sapuan, Matthew Saw, Eugene Cheah and Julia Low\n///\n/// Permission is hereby granted, free of charge, to any person obtaining a copy\n/// of this software and associated documentation files (the \"Software\"), to deal\n/// in the Software without restriction, including without limitation the rights\n/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n/// copies of the Software, and to permit persons to whom the Software is\n/// furnished to do so, subject to the following conditions:\n///\n/// The above copyright notice and this permission notice shall be included in\n/// all copies or substantial portions of the Software.\n///\n/// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n/// THE SOFTWARE.\n///\n\nGPGPUManager.PACK_FLOAT_INCLUDE =\n`float round(float x) {\n    return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n    vec2 res = floor(mod(x, y));\n    return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n    float res = floor(mod(x, y));\n    return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat unpackFloat(vec4 rgba) {\n` + ((GPGPUManager.ENDIANNESS == 'LE') ? '' :\n`    rgba.rgba = rgba.abgr;\n`) +\n`    rgba *= 255.0;\n    vec2 gte128;\n    gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n    gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n    float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n    float res = exp2(round(exponent));\n    rgba.b = rgba.b - 128.0 * gte128.x;\n    res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n    res *= gte128.y * -2.0 + 1.0;\n    return res;\n}\n\nvec4 packFloat(float f) {\n    float F = abs(f);\n    float sign = f < 0.0 ? 1.0 : 0.0;\n    float exponent = floor(log2(F));\n    float mantissa = (exp2(-exponent) * F);\n    // exponent += floor(log2(mantissa));\n    vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n    rgba.rg = integerMod(rgba.rg, 256.0);\n    rgba.b = integerMod(rgba.b, 128.0);\n    rgba.a = exponent*0.5 + 63.5;\n    rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n    rgba = floor(rgba);\n    rgba *= 0.003921569; // 1/255\n` + ((GPGPUManager.ENDIANNESS == 'LE') ? '' :\n`    rgba.rgba = rgba.abgr;\n`) +\n`    return rgba;\n}\n\n`;\n\nGPGPUManager.createFragShaderSrc = (computeFunc, uniforms, includeSrc = '', useDrawBuffers = true) => [\n    useDrawBuffers ?\n`#extension GL_EXT_draw_buffers: require\n` : '',\n`precision highp float;\nprecision highp sampler2D;\n\n`,\n    ...uniforms.map(uniform =>\n`uniform ` + uniform.type + ` ` + uniform.name + `;\n`\n    ),\n`\nvarying vec2 vCoord;\n\nvec4 arrGet(sampler2D arr, ivec2 id, ivec2 dims){\n    return texture2D(arr, (vec2(id) + vec2(0.5)) / vec2(dims));\n}\n\n`,\n    includeSrc,\n`void main(){\n    ivec2 threadId = ivec2(vCoord * vec2(uDims));\n`,\n    computeFunc,\n`}\n`].join('');\n\nmodule.exports = GPGPUManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPGPUManager.js","import GPGPUComplexIncludes from 'gpgpu/GPGPUComplexIncludes.js';\nimport GPGPUManager from 'gpgpu/GPGPUManager.js';\nimport ComplexArray2D from 'gpgpu/ComplexArray2D.js';\n\nclass GPUDFT{\n    constructor(manager){\n        if(manager.useFloat){\n            throw 'GPUDFT does not support floating point textures yet.';\n        }\n        this.manager = manager;\n        this.dftKernel = manager.createKernel(\n`vec2 res = vec2(0.0, 0.0);\nfor(int i = 0; i < 4096; i++){\n    if(i >= uDims.y) break;\n    res += unpackFloat(arrGet(uArr, ivec2(threadId.x, i), uDims)) *\n        complexExp(vec2(0.0, -2.0 * PI * float(threadId.y) * float(i) / float(uDims.y)));\n}\ngl_FragData[0] = packFloat(res.x);\ngl_FragData[1] = packFloat(res.y);\n`,\n        ['uArr'], [], 2, GPGPUManager.PACK_FLOAT_INCLUDE + GPGPUComplexIncludes.PI + GPGPUComplexIncludes.LIB);\n    }\n    parallelDFT(arr){\n        const gpuArr = arr.getGPUArrs(this.manager)[0];\n        const resGPUArrs = this.manager.runKernel(this.dftKernel, [gpuArr], arr.dims);\n        return ComplexArray2D.fromGPUArrs(resGPUArrs[0], resGPUArrs[1]);\n    }\n    dispose(){\n        this.manager.disposeKernel(this.dftKernel);\n    }\n};\n\nmodule.exports = GPUDFT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPUDFT.js","class GPGPUComplexIncludes{\n};\nGPGPUComplexIncludes.PI =\n`const float PI = 3.1415926535897932384626433832795;\n\n`;\nGPGPUComplexIncludes.LIB =\n`vec2 complexMult(vec2 a, vec2 b){\n    return vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 complexDiv(vec2 a, vec2 b){\n    float divisor = dot(b, b);\n    return vec2(dot(a, b), a.y * b.x - a.x * b.y) / divisor;\n}\n\nvec2 complexPow(vec2 a, vec2 b){\n    float r = length(a), phi = atan(a.y, a.x);\n    float newR = pow(r, b.x) * exp(-b.y * phi);\n    float newPhi = b.y * log(r) + b.x * phi;\n    return newR * vec2(cos(newPhi), sin(newPhi));\n}\n\nvec2 complexExp(vec2 b){\n    return exp(b.x) * vec2(cos(b.y), sin(b.y));\n}\n\nvec2 complexLog(vec2 x){\n    return vec2(log(length(x)), atan(x.y, x.x));\n}\n\n`;\n\nmodule.exports = GPGPUComplexIncludes;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPGPUComplexIncludes.js","import GPGPUComplexIncludes from 'gpgpu/GPGPUComplexIncludes.js';\nimport GPGPUManager from 'gpgpu/GPGPUManager.js';\nimport {Utils} from 'utils/Utils.js';\nimport ComplexArray2D from 'gpgpu/ComplexArray2D.js';\n\n/*\n\nWith reference to Understanding the FFT Algorithm by Jake Vanderplas\nSource: https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/\nLicense: BSD\n\n*/\n\nclass GPUFFTPacked{\n    constructor(manager){\n        this.manager = manager;\n        this.zeroKernel = this.manager.createKernel(\n`gl_FragData[0] = packFloat(0.0);\n`,\n        [], [], 1, GPGPUManager.PACK_FLOAT_INCLUDE);\n        this.fftKernel = this.manager.createKernel(\n`//factor of two cancels out for 2PI and period\nvec2 twiddle = complexExp(vec2(0.0,\n    -PI * float(threadId.y) / float(uButterflyWidth)\n));\nint column = threadId.y / uButterflyWidth;\nint row = threadId.y - column * uButterflyWidth;\nint refIndex1 = (column / 2) * uButterflyWidth + row;\nivec2 refPos1 = ivec2(threadId.x, refIndex1);\nint refIndex2 = refIndex1 + uDims.y / 2;\nivec2 refPos2 = ivec2(threadId.x, refIndex2);\nvec2 ref1 = vec2(\n    unpackFloat(arrGet(uReal, refPos1, uDims)),\n    unpackFloat(arrGet(uImg, refPos1, uDims))\n);\nvec2 ref2 = vec2(\n    unpackFloat(arrGet(uReal, refPos2, uDims)),\n    unpackFloat(arrGet(uImg, refPos2, uDims))\n);\nvec2 res = ref1 + complexMult(twiddle, ref2);\ngl_FragData[0] = packFloat(res.x);\ngl_FragData[1] = packFloat(res.y);\n`,\n        ['uReal', 'uImg'], [{\n            type: 'int',\n            name: 'uButterflyWidth'\n        }], 2, GPGPUManager.PACK_FLOAT_INCLUDE + GPGPUComplexIncludes.PI + GPGPUComplexIncludes.LIB);\n    }\n    parallelFFT(arr){\n        const fftWidth = arr.dims.height;\n        if((fftWidth & (fftWidth - 1)) != 0){\n            throw 'Cannot do FFT on non-power of two width.';\n        }\n        let realArr = arr.getGPUArrs(this.manager)[0];\n        let imgArr = arr.getGPUArrs(this.manager)[1];\n        const generateImgArr = imgArr == null;\n        if(generateImgArr)\n            imgArr = this.manager.runKernel(this.zeroKernel, [], arr.dims)[0];\n        for(let butterflyWidth = 1; butterflyWidth < fftWidth; butterflyWidth *= 2){\n            const stepResGPUArrs = this.manager.runKernel(\n                this.fftKernel, [realArr, imgArr], arr.dims, {\n                    uButterflyWidth: butterflyWidth\n                }\n            );\n            if(butterflyWidth == 1 && generateImgArr){\n                this.manager.disposeGPUArr(imgArr);\n            }\n            if(butterflyWidth != 1){\n                this.manager.disposeGPUArr(realArr);\n                this.manager.disposeGPUArr(imgArr);\n            }\n            realArr = stepResGPUArrs[0];\n            imgArr = stepResGPUArrs[1];\n        }\n        return ComplexArray2D.fromGPUArrs(realArr, imgArr);\n    }\n    dispose(){\n        this.manager.disposeKernel(this.zeroKernel);\n        this.manager.disposeKernel(this.fftKernel);\n    }\n};\n\nclass GPUFFTFloat{\n    constructor(manager){\n        this.manager = manager;\n        this.fftKernel = this.manager.createKernel(\n`//factor of two cancels out for 2PI and period\nvec2 twiddle = complexExp(vec2(0.0,\n    -PI * float(threadId.y) / float(uButterflyWidth)\n));\nint column = threadId.y / uButterflyWidth;\nint row = threadId.y - column * uButterflyWidth;\nint refIndex1 = (column / 2) * uButterflyWidth + row;\nivec2 refPos1 = ivec2(threadId.x, refIndex1);\nint refIndex2 = refIndex1 + uDims.y / 2;\nivec2 refPos2 = ivec2(threadId.x, refIndex2);\n// Note: not setting initial imaginary part to zero\n// unless tests fail somewhere.\nvec2 ref1 = arrGet(uArr, refPos1, uDims).ar;\nvec2 ref2 = arrGet(uArr, refPos2, uDims).ar;\nvec2 res = ref1 + complexMult(twiddle, ref2);\ngl_FragData[0] = vec4(res.y, 0.0, 0.0, res.x);\n`,\n        ['uArr'], [{\n            type: 'int',\n            name: 'uButterflyWidth'\n        }], 1, GPGPUComplexIncludes.PI + GPGPUComplexIncludes.LIB);\n    }\n    parallelFFT(arr){\n        const fftWidth = arr.dims.height;\n        if((fftWidth & (fftWidth - 1)) != 0){\n            throw 'Cannot do FFT on non-power of two width.';\n        }\n        let stepArr = arr.getGPUArr(this.manager);\n        for(let butterflyWidth = 1; butterflyWidth < fftWidth; butterflyWidth *= 2){\n            const stepResGPUArr = this.manager.runKernel(\n                this.fftKernel, [stepArr], arr.dims, {\n                    uButterflyWidth: butterflyWidth\n                }\n            );\n            if(butterflyWidth != 1){\n                this.manager.disposeGPUArr(stepArr);\n            }\n            stepArr = stepResGPUArr[0];\n        }\n        return ComplexArray2D.fromGPUArr(stepArr);\n    }\n    dispose(){\n        this.manager.disposeKernel(this.fftKernel);\n    }\n};\n\nclass GPUFFT{\n    constructor(manager){\n        this.fftManager = manager.useFloat ?\n            new GPUFFTFloat(manager) :\n            new GPUFFTPacked(manager);\n    }\n    parallelFFT(arr){\n        return this.fftManager.parallelFFT(arr);\n    }\n    dispose(){\n        this.fftManager.dispose();\n    }\n};\n\nmodule.exports = GPUFFT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPUFFT.js","import GPUFFT from 'gpgpu/GPUFFT.js';\nimport GPGPUComplexIncludes from 'gpgpu/GPGPUComplexIncludes.js';\nimport {Utils, Dimensions} from 'utils/Utils.js';\nimport ComplexArray2D from 'gpgpu/ComplexArray2D.js';\n\nclass GPUSTFT{\n    constructor(manager){\n        if(!manager.useFloat){\n            throw 'GPUSTFT only supports floating-point textures.';\n        }\n        this.manager = manager;\n        this.fftManager = new GPUFFT(this.manager);\n        this.windowKernel = this.manager.createKernel(\n`float windVal = 0.5 * (1.0 - cos(2.0 * PI * float(threadId.y * 2 + 1) / float(uDims.y * 2)));\nint arrIndex = threadId.x * uDims.y / 2 + threadId.y;\nfloat res = windVal * arrGet(uArr, ivec2(\n    int(mod(float(arrIndex), float(uSrcDims.x))),\n    arrIndex / uSrcDims.x\n), uSrcDims).a;\ngl_FragData[0] = vec4(0.0, 0.0, 0.0, res);\n`,\n        ['uArr'], [{\n            type: 'ivec2',\n            name: 'uSrcDims'\n        }], 1, GPGPUComplexIncludes.PI);\n    }\n    stft(arr, windSz = 1024, fromGPUArr = false, wrapWidth = windSz / 2){\n        if(!fromGPUArr && arr.length % wrapWidth != 0){\n            const paddedArr = new Float32Array(\n                Math.floor(arr.length / wrapWidth + 1) * wrapWidth\n            );\n            paddedArr.set(arr);\n            arr = paddedArr;\n        }\n        const gpuArrDims = fromGPUArr ? arr.dims :\n            new Dimensions(wrapWidth, arr.length / wrapWidth);\n        const gpuArr = fromGPUArr ? arr :\n            this.manager.flatArrToGPUArr(arr, gpuArrDims, 1);\n        const fftInputArr = ComplexArray2D.fromGPUArr(\n            this.manager.runKernel(\n                this.windowKernel, [gpuArr],\n                new Dimensions(arr.length / (windSz / 2) - 1, windSz), {\n                    uSrcDims: gpuArrDims.toArray()\n                }\n            )[0]\n        );\n        if(!fromGPUArr) this.manager.disposeGPUArr(gpuArr);\n        const resGPUArr = this.fftManager.parallelFFT(fftInputArr);\n        fftInputArr.dispose(this.manager);\n        return resGPUArr;\n    }\n    dispose(){\n        this.manager.disposeKernel(this.windowKernel);\n        this.fftManager.dispose();\n    }\n};\nGPUSTFT.DEFAULT_WRAP_WIDTH = 2048;\n\nmodule.exports = GPUSTFT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPUSTFT.js","import GPUSTFT from 'gpgpu/GPUSTFT.js';\nimport {Dimensions} from 'utils/Utils.js';\n\nclass SpectrogramKernel{\n    constructor(manager){\n        this.manager = manager;\n        this.postprocessKernel = SpectrogramKernel.createPostprocessKernel(this.manager);\n    }\n    get ctx(){\n        return this.manager.ctx;\n    }\n    run(data, magRange, magOffset){\n        const resGPUArr = this.manager.runKernel(\n            this.postprocessKernel, [data.getGPUArr(this.manager)],\n            new Dimensions(data.dims.width, data.dims.height / 2), {\n                magRange: magRange,\n                magOffset: magOffset\n            }, true\n        )[0];\n        return resGPUArr;\n    }\n    dispose(){\n        this.manager.disposeKernel(this.postprocessKernel);\n    }\n    static createPostprocessKernel(manager){\n        return manager.createKernel(\n`float mag = length(arrGet(uArr, threadId, ivec2(uDims.x, uDims.y * 2)).ar) / sqrt(float(uDims.y * 2));\ngl_FragData[0] = vec4(\n    log(mag) / magRange + magOffset,\n    0.0, 0.0, 1.0\n);\n`,\n            ['uArr'], [{\n                type: 'float',\n                name: 'magRange'\n            }, {\n                type: 'float',\n                name: 'magOffset'\n            }\n        ], 1, '');\n    }\n};\n\nmodule.exports = SpectrogramKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/SpectrogramKernel.js","import WebGLStateManager from 'webgl/WebGLStateManager.js';\nimport GPGPUManager from 'gpgpu/GPGPUManager.js';\nimport {Utils, Dimensions} from 'utils/Utils.js';\nimport EventLoop from 'utils/EventLoop.js';\nimport GPUDFT from 'gpgpu/GPUDFT.js';\nimport GPUFFT from 'gpgpu/GPUFFT.js';\nimport ComplexArray2D from 'gpgpu/ComplexArray2D.js';\n\nclass FFTTimingTestManager{\n    static run(){\n        const stateManager = GPGPUManager.createWebGLStateManager();\n        const manager = new GPGPUManager(stateManager, false);\n        const managerFloat = new GPGPUManager(stateManager, true);\n        const testDims = new Dimensions(500, 2048);\n        const randArr1 = ComplexArray2D.fromRealArr(\n            Utils.compute2DArrayAsArray2D(\n                testDims,\n                pos => Math.random()\n            )\n        );\n        const randArr2 = ComplexArray2D.fromRealArr(\n            randArr1.getCPUArrs()[0]\n        );\n        const randArr3 = ComplexArray2D.fromRealArr(\n            randArr2.getCPUArrs()[0]\n        );\n        const gpuDFT = new GPUDFT(manager);\n        const gpuFFT = new GPUFFT(manager);\n        const gpuFFTFloat = new GPUFFT(managerFloat);\n        const eventLoop = new EventLoop();\n        let dftTime = 0, fftTime = 0, fftFloatTime = 0;\n        eventLoop.addTask(() => {\n            randArr1.getGPUArrs(manager);\n            manager.ctx.finish();\n            const startTime = performance.now();\n            const dftArr = gpuDFT.parallelDFT(randArr1, true);\n            manager.ctx.finish();\n            const endTime = performance.now();\n            dftTime = endTime - startTime;\n            dftArr.dispose(manager);\n            randArr1.dispose(manager);\n        });\n        eventLoop.addTask(() => {\n            randArr2.getGPUArrs(manager);\n            manager.ctx.finish();\n            const startTime = performance.now();\n            const fftArr = gpuFFT.parallelFFT(randArr2, true);\n            manager.ctx.finish();\n            const endTime = performance.now();\n            fftTime = endTime - startTime;\n            fftArr.dispose(manager);\n            randArr2.dispose(manager);\n        });\n        eventLoop.addTask(() => {\n            randArr3.getGPUArrs(managerFloat);\n            managerFloat.ctx.finish();\n            const startTime = performance.now();\n            const fftFloatArr = gpuFFTFloat.parallelFFT(randArr3, true);\n            managerFloat.ctx.finish();\n            const endTime = performance.now();\n            fftFloatTime = endTime - startTime;\n            fftFloatArr.dispose(managerFloat);\n            randArr3.dispose(managerFloat);\n        });\n        eventLoop.addTask(() => {\n            gpuDFT.dispose();\n            gpuFFT.dispose();\n            gpuFFTFloat.dispose();\n            console.log('DFT: ' + Math.floor(dftTime).toString() + 'ms; FFT (packed): ' + Math.floor(fftTime).toString() + 'ms; FFT (float): ' + Math.floor(fftFloatTime).toString() + 'ms.');\n            manager.dispose();\n            managerFloat.dispose();\n        });\n        eventLoop.start();\n    }\n};\n\nmodule.exports = FFTTimingTestManager;\n\n\n\n// WEBPACK FOOTER //\n// ./src/tests/FFTTimingTestManager.js","import Queue from 'utils/Queue.js';\n\nclass EventLoopTask{\n    constructor(run, checkValid = null, invalidCallback = null){\n        if(checkValid == null){\n            checkValid = () => true;\n        }\n        if(invalidCallback == null){\n            invalidCallback = () => {};\n        }\n        this.run = run;\n        this.checkValid = checkValid;\n        this.invalidCallback = invalidCallback;\n    }\n};\n\nclass EventLoop{\n    constructor(updateFunc = null){\n        this.tasks = new Queue();\n        this.enabled = false;\n        this.updateFunc = updateFunc;\n        this.loopFunc = () => {\n            if(!this.enabled) return;\n            if(this.updateFunc != null){\n                this.updateFunc();\n            }\n            while(!this.tasks.isEmpty()){\n                const task = this.tasks.pop();\n                if(task.checkValid()){\n                    task.run();\n                    break;\n                }\n            }\n            window.requestAnimationFrame(this.loopFunc);\n        };\n    }\n    start(){\n        this.enabled = true;\n        if(this.loop == null){\n            window.requestAnimationFrame(this.loopFunc);\n        }\n    }\n    stop(){\n        this.enabled = false;\n    }\n    addTask(callback, checkValid = null, invalidCallback = null){\n        this.tasks.push(\n            new EventLoopTask(callback, checkValid, invalidCallback)\n        );\n    }\n};\n\nmodule.exports = EventLoop;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/EventLoop.js","/*\n\nWith reference to Queue.js\n\nA function to represent a queue\n\nCreated by Stephen Morley - http://code.stephenmorley.org/ - and released under\nthe terms of the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\nclass Queue{\n    constructor(){\n        this.arr = [];\n        this.offset = 0;\n    }\n    getLength(){\n        return this.arr.length - this.offset;\n    }\n    isEmpty(){\n        return this.arr.length == 0;\n    }\n    push(val){\n        this.arr.push(val);\n    }\n    pop(){\n        if(this.arr.length == 0){\n            throw 'Cannot pop from empty queue.';\n        }\n        const res = this.arr[this.offset];\n        this.offset++;\n        if(this.offset * 2 >= this.arr.length){\n            this.arr = this.arr.slice(this.offset);\n            this.offset = 0;\n        }\n        return res;\n    }\n};\n\nmodule.exports = Queue;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/Queue.js","import QuadDrawingUtils from 'webgl/QuadDrawingUtils.js';\nimport ShaderUtils from 'webgl/ShaderUtils.js';\nimport {Vector} from 'utils/Utils.js';\n\nclass QuadDrawingKernel{\n    constructor(stateManager){\n        this.stateManager = stateManager;\n        const vertShaderSrc = QuadDrawingUtils.createVertShaderSrc(\n            [QuadDrawingUtils.TRANSFORMS.flipY],\n            true, true\n        );\n        const fragShaderSrc = QuadDrawingUtils.createDirectDrawFragShaderSrc();\n        const programInfo = ShaderUtils.createProgram(this.ctx, vertShaderSrc, fragShaderSrc);\n        const program = programInfo.program;\n\n        this.ctx.useProgram(program);\n        ShaderUtils.setVertAttrib(this.ctx, program, 'aPos', 2, this.stateManager.getQuadPosBuff())\n        ShaderUtils.registerTextures(this.ctx, program, ['uImg']);\n\n        this.programInfo = programInfo;\n    }\n    get ctx(){\n        return this.stateManager.ctx;\n    }\n    get program(){\n        return this.programInfo.program;\n    }\n    run(tex, boundingRect, canvasDims){\n        this.ctx.useProgram(this.program);\n        ShaderUtils.registerVectorUniform(this.ctx, this.program, 'uScale',\n            new Vector(\n                boundingRect.width / canvasDims.width,\n                boundingRect.height / canvasDims.height\n            )\n        );\n        ShaderUtils.registerVectorUniform(this.ctx, this.program, 'uTransform',\n            new Vector(\n                boundingRect.x / canvasDims.width,\n                boundingRect.y / canvasDims.height\n            )\n        );\n        this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, null);\n        ShaderUtils.bindTextures(this.ctx, [tex]);\n\n        this.ctx.viewport(0, 0, canvasDims.width, canvasDims.height);\n        this.stateManager.enableAttribs(1);\n        this.ctx.bindBuffer(this.ctx.ELEMENT_ARRAY_BUFFER, this.stateManager.getQuadIndexBuff());\n        this.ctx.drawElements(this.ctx.TRIANGLE_STRIP, QuadDrawingUtils.QUAD_NUM_VERT, this.ctx.UNSIGNED_SHORT, 0);\n    }\n    dispose(){\n        ShaderUtils.disposeProgram(this.ctx, this.programInfo);\n    }\n};\n\nmodule.exports = QuadDrawingKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./src/webgl/QuadDrawingKernel.js","import GPGPUComplexIncludes from 'gpgpu/GPGPUComplexIncludes.js';\nimport GPGPUManager from 'gpgpu/GPGPUManager.js';\nimport {Utils} from 'utils/Utils.js';\nimport ComplexArray2D from 'gpgpu/ComplexArray2D.js';\n\nclass GPUIFFT{\n    constructor(manager){\n        if(!manager.useFloat){\n            throw 'GPUIFFT only supports floating-point textures.';\n        }\n        this.manager = manager;\n        this.fftKernel = this.manager.createKernel(\n`//factor of two cancels out for 2PI and period\nvec2 twiddle = complexExp(vec2(0.0,\n    PI * float(threadId.y) / float(uButterflyWidth)\n));\nint column = threadId.y / uButterflyWidth;\nint row = threadId.y - column * uButterflyWidth;\nint refIndex1 = (column / 2) * uButterflyWidth + row;\nivec2 refPos1 = ivec2(threadId.x, refIndex1);\nint refIndex2 = refIndex1 + uDims.y / 2;\nivec2 refPos2 = ivec2(threadId.x, refIndex2);\n// Note: not setting initial imaginary part to zero\n// unless tests fail somewhere.\nvec2 ref1 = arrGet(uArr, refPos1, uDims).ar;\nvec2 ref2 = arrGet(uArr, refPos2, uDims).ar;\nvec2 res = ref1 + complexMult(twiddle, ref2);\ngl_FragData[0] = vec4(res.y, 0.0, 0.0, res.x);\n`,\n        ['uArr'], [{\n            type: 'int',\n            name: 'uButterflyWidth'\n        }], 1, GPGPUComplexIncludes.PI + GPGPUComplexIncludes.LIB);\n    }\n    parallelIFFT(arr){\n        const fftWidth = arr.dims.height;\n        if((fftWidth & (fftWidth - 1)) != 0){\n            throw 'Cannot do FFT on non-power of two width.';\n        }\n        let stepArr = arr.getGPUArr(this.manager);\n        for(let butterflyWidth = 1; butterflyWidth < fftWidth; butterflyWidth *= 2){\n            const stepResGPUArr = this.manager.runKernel(\n                this.fftKernel, [stepArr], arr.dims, {\n                    uButterflyWidth: butterflyWidth\n                }\n            );\n            if(butterflyWidth != 1){\n                this.manager.disposeGPUArr(stepArr);\n            }\n            stepArr = stepResGPUArr[0];\n        }\n        return ComplexArray2D.fromGPUArr(stepArr);\n    }\n    dispose(){\n        this.manager.disposeKernel(this.fftKernel);\n    }\n};\n\nmodule.exports = GPUIFFT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPUIFFT.js","import {Utils} from 'utils/Utils.js';\n\nclass ComplexArray2D{\n    constructor(cpuArrs = null, gpuArrs = null){\n        this.cpuArrs = cpuArrs;\n        this.gpuArrs = gpuArrs;\n    }\n    get dims(){\n        return (this.cpuArrs == null) ?\n            this.gpuArrs[0].dims :\n            this.cpuArrs[0].dims;\n    }\n    getCPUArrs(manager){\n        if(this.cpuArrs == null){\n            if(manager.useFloat){\n                const arr2D = manager.gpuArrToArr(this.gpuArrs[0], false);\n                this.cpuArrs = [Utils.compute2DArrayAsArray2D(\n                    arr2D.dims,\n                    pos => arr2D.data[pos.y][pos.x][3]\n                ), Utils.compute2DArrayAsArray2D(\n                    arr2D.dims,\n                    pos => arr2D.data[pos.y][pos.x][0]\n                )];\n            }\n            else{\n                this.cpuArrs = [\n                    manager.gpuArrToArr(this.gpuArrs[0]),\n                    (this.gpuArrs[1] == null) ? null :\n                    manager.gpuArrToArr(this.gpuArrs[1])\n                ];\n            }\n        }\n        return this.cpuArrs;\n    }\n    getGPUArrs(manager){\n        if(this.gpuArrs == null){\n            if(manager.useFloat){\n                if(this.cpuArrs[1] == null){\n                    this.gpuArrs = [manager.flatArrToGPUArr(\n                        Utils.flatten(this.cpuArrs[0].data),\n                        this.dims, 1\n                    )];\n                }\n                else{\n                    this.gpuArrs = [manager.arrToGPUArr(\n                        Utils.compute2DArrayAsArray2D(\n                            this.dims,\n                            pos => [\n                                this.cpuArrs[1].data[pos.y][pos.x],\n                                0, 0,\n                                this.cpuArrs[0].data[pos.y][pos.x]\n                            ]\n                        ), false\n                    )];\n                }\n            }\n            else{\n                this.gpuArrs = [\n                    manager.arrToGPUArr(this.cpuArrs[0]),\n                    (this.cpuArrs[1] == null) ? null :\n                    manager.arrToGPUArr(this.cpuArrs[1])\n                ];\n            }\n        }\n        return this.gpuArrs;\n    }\n    getGPUArr(manager){\n        return this.getGPUArrs(manager)[0];\n    }\n    dispose(manager){\n        if(this.gpuArrs != null){\n            this.gpuArrs.map(gpuArr => {\n                if(gpuArr != null) manager.disposeGPUArr(gpuArr);\n            });\n        }\n    }\n    static fromRealArr(arr){\n        return new ComplexArray2D([arr, null]);\n    }\n    static fromArrs(realArr, imgArr){\n        return new ComplexArray2D([realArr, imgArr]);\n    }\n    static fromGPUArr(gpuArr){\n        return new ComplexArray2D(null, [gpuArr]);\n    }\n    static fromGPUArrs(realGPUArr, imgGPUArr){\n        return new ComplexArray2D(null, [realGPUArr, imgGPUArr]);\n    }\n}\n\nmodule.exports = ComplexArray2D;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/ComplexArray2D.js","import GPUIFFT from 'gpgpu/GPUIFFT.js';\nimport GPGPUComplexIncludes from 'gpgpu/GPGPUComplexIncludes.js';\nimport {Dimensions, Utils} from 'utils/Utils.js';\n\nclass GPUISTFT{\n    constructor(manager){\n        if(!manager.useFloat){\n            throw 'GPUSTFT only supports floating-point textures.';\n        }\n        this.manager = manager;\n        this.fftManager = new GPUIFFT(this.manager);\n        this.windowKernel = this.manager.createKernel(\n`int arrIndex = threadId.y * uDims.x + threadId.x;\nint halfWindSz = uSrcDims.y / 2;\nint chunkIndex = arrIndex / halfWindSz;\nint offset = int(mod(float(arrIndex), float(halfWindSz)));\nivec2 ref1 = ivec2(chunkIndex, offset);\nivec2 ref2 = ivec2(chunkIndex - 1, offset + halfWindSz);\nfloat res = ((ref1.x < uSrcDims.x) ? arrGet(uArr, ref1, uSrcDims).a : 0.0) +\n    ((ref2.x >= 0) ? arrGet(uArr, ref2, uSrcDims).a : 0.0);\ngl_FragData[0] = vec4(res, 0.0, 0.0, 0.0);\n`,\n        ['uArr'], [{\n            type: 'ivec2',\n            name: 'uSrcDims'\n        }], 1, GPGPUComplexIncludes.PI);\n    }\n    istft(arr, toGPUArr = false, wrapWidth = 2048){\n        const windowedArr = this.fftManager.parallelIFFT(arr);\n        const windSz = windowedArr.dims.height;\n        const resArrLength = (windSz / 2) * (windowedArr.dims.width + 1);\n        const resGPUArr = this.manager.runKernel(\n            this.windowKernel, [windowedArr.getGPUArr(this.manager)],\n            new Dimensions(wrapWidth, Math.ceil(resArrLength / wrapWidth)),\n            {\n                uSrcDims: windowedArr.dims.toArray()\n            }\n        )[0];\n        windowedArr.dispose(this.manager);\n        if(toGPUArr) return resGPUArr;\n        else{\n            const resPixelArr = this.manager.gpuArrToFlatArr(resGPUArr);\n            this.manager.disposeGPUArr(resGPUArr);\n            const resArr = [];\n            for(let i = 0; i < resArrLength; i++){\n                resArr.push(resPixelArr[i * 4]);\n            }\n            return resArr;\n        }\n    }\n    dispose(){\n        this.manager.disposeKernel(this.windowKernel);\n        this.fftManager.dispose();\n    }\n};\n\nmodule.exports = GPUISTFT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/gpgpu/GPUISTFT.js"],"sourceRoot":""}